name: Build LowCode Platform

on:
  push: # Trigger on push to any branch
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
      fail-fast: false
    env:
      tag: ${{ github.ref_name != 'main' && format('-{0}-{1}', github.ref_name, github.run_id) || '' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        check-latest: true

    - name: Create asset directories
      run: |
        mkdir -p views/assets/thirdparties/vuetify
        mkdir -p views/assets/css/sform/fontawesome
        mkdir -p views/assets/css/sform/webfonts
    
    - name: Download dependencies
      run: |
        # Extract dependencies from build.sh
        # Vue, Vuetify, Material Design Icons, Font Awesome
        dependencies=(
          "views/assets/thirdparties/vuetify/vue.js|https://cdn.jsdelivr.net/npm/vue@2.7.8/dist/vue.js"
          "views/assets/thirdparties/vuetify/vuetify.js|https://cdn.jsdelivr.net/npm/vuetify@2.6.8/dist/vuetify.js"
          "views/assets/thirdparties/vuetify/vuetify.min.css|https://cdn.jsdelivr.net/npm/vuetify@2.6.8/dist/vuetify.min.css"
          "views/assets/thirdparties/vuetify/materialdesignicons.min.css|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.min.css"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.eot|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.eot"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.ttf|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.ttf"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.woff|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.woff"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.woff2|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.woff2"
          "views/assets/css/sform/fontawesome/brands.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/brands.css"
          "views/assets/css/sform/fontawesome/fontawesome.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/fontawesome.css"
          "views/assets/css/sform/fontawesome/solid.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/solid.css"
          "views/assets/css/sform/webfonts/fa-brands-400.eot|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.eot"
          "views/assets/css/sform/webfonts/fa-brands-400.svg|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.svg"
          "views/assets/css/sform/webfonts/fa-brands-400.ttf|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.ttf"
          "views/assets/css/sform/webfonts/fa-brands-400.woff|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.woff"
          "views/assets/css/sform/webfonts/fa-brands-400.woff2|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.woff2"
          "views/assets/css/sform/webfonts/fa-solid-900.eot|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.eot"
          "views/assets/css/sform/webfonts/fa-solid-900.svg|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.svg"
          "views/assets/css/sform/webfonts/fa-solid-900.ttf|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.ttf"
          "views/assets/css/sform/webfonts/fa-solid-900.woff|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.woff"
          "views/assets/css/sform/webfonts/fa-solid-900.woff2|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.woff2"
        )
        
        for item in "${dependencies[@]}"; do
          file="${item%%|*}"
          url="${item##*|}"
          curl -fSL "$url" -o "$file" || { 
            echo "Failed to download $url"; 
            exit 1; 
          }
        done
    
    - name: Build Go application
      run: |
        mkdir -p build/
        BUILD_OS="${{ matrix.os }}"
        BUILD_ARCH="${{ matrix.arch }}"
        GOOS=$(echo "$BUILD_OS" | sed 's/-latest//')
        WIN_SUFFIX=""
        if [ "$BUILD_OS" = "windows" ]; then
          WIN_SUFFIX=".exe"
        fi
        CGO_ENABLED=0 go build -o build/run-${GOOS}-${BUILD_ARCH}${WIN_SUFFIX} main.go
        cp -r views build/
        cp -r apps build/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LowCode_Plantform-${{ matrix.os == 'darwin' && 'macos' || matrix.os }}-${{ matrix.arch }}${{ env.tag }}
        path: build/

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: LowCode_Plantform-linux-amd64${{ env.tag }}
        path: ./build

    - name: Build sample apps
      run: |
        apt-get update
        apt-get install -y build-essential pkg-config libopencv-dev default-libmysqlclient-dev libcurl4-openssl-dev

        cd build/apps
        mkdir -p ip_tracker/bin
        mkdir -p image_converter/bin
        mkdir -p dbuser_manager/bin
        
        g++ -std=c++11 $STATIC_FLAG -o ip_tracker/bin/ip_tracker ip_tracker/ip_tracker.cpp -lcurl
        g++ -std=c++11 $STATIC_FLAG -o image_converter/bin/image_converter image_converter/image_converter.cpp `pkg-config --cflags --libs opencv4`
        g++ -std=c++11 $STATIC_FLAG -o dbuser_manager/bin/dbuser_manager dbuser_manager/dbuser_manager.cpp -lmysqlclient

    - name: Build and push Docker image
      env:
        DOCKER_IMAGE: jjli427/lowcode-platform
        DOCKER_TAG: ${{ github.ref_name }}-latest
      run: |
        docker build -t $DOCKER_IMAGE:$DOCKER_TAG ./build
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker push $DOCKER_IMAGE:$DOCKER_TAG