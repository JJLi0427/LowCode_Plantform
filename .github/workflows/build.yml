name: Build LowCode Platform

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  tag: ${{ github.ref_name }}-${{ github.run_id }}

jobs:
  ViewDependencies:
    runs-on: ubuntu-latest
    steps:
    - name: Sanitize tag
      run: echo "TAG=${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create asset directories
      run: |
        mkdir -p views/assets/thirdparties/vuetify
        mkdir -p views/assets/css/sform/fontawesome
        mkdir -p views/assets/css/sform/webfonts
    
    - name: Download dependencies
      run: |
        # Extract dependencies from build.sh
        # Vue, Vuetify, Material Design Icons, Font Awesome
        dependencies=(
          "views/assets/thirdparties/vuetify/vue.js|https://cdn.jsdelivr.net/npm/vue@2.7.8/dist/vue.js"
          "views/assets/thirdparties/vuetify/vuetify.js|https://cdn.jsdelivr.net/npm/vuetify@2.6.8/dist/vuetify.js"
          "views/assets/thirdparties/vuetify/vuetify.min.css|https://cdn.jsdelivr.net/npm/vuetify@2.6.8/dist/vuetify.min.css"
          "views/assets/thirdparties/vuetify/materialdesignicons.min.css|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.min.css"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.eot|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.eot"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.ttf|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.ttf"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.woff|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.woff"
          "views/assets/thirdparties/vuetify/materialdesignicons-webfont.woff2|https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/fonts/materialdesignicons-webfont.woff2"
          "views/assets/css/sform/fontawesome/brands.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/brands.css"
          "views/assets/css/sform/fontawesome/fontawesome.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/fontawesome.css"
          "views/assets/css/sform/fontawesome/solid.css|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/solid.css"
          "views/assets/css/sform/webfonts/fa-brands-400.eot|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.eot"
          "views/assets/css/sform/webfonts/fa-brands-400.svg|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.svg"
          "views/assets/css/sform/webfonts/fa-brands-400.ttf|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.ttf"
          "views/assets/css/sform/webfonts/fa-brands-400.woff|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.woff"
          "views/assets/css/sform/webfonts/fa-brands-400.woff2|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-brands-400.woff2"
          "views/assets/css/sform/webfonts/fa-solid-900.eot|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.eot"
          "views/assets/css/sform/webfonts/fa-solid-900.svg|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.svg"
          "views/assets/css/sform/webfonts/fa-solid-900.ttf|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.ttf"
          "views/assets/css/sform/webfonts/fa-solid-900.woff|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.woff"
          "views/assets/css/sform/webfonts/fa-solid-900.woff2|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/webfonts/fa-solid-900.woff2"
        )
        
        for item in "${dependencies[@]}"; do
          file="${item%%|*}"
          url="${item##*|}"
          curl -fSL "$url" -o "$file" || { 
            echo "Failed to download $url"; 
            exit 1; 
          }
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: views
        path: views/

  BuildLinux:
    needs: [ViewDependencies]
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        check-latest: true

    - name: Download views dependencies
      uses: actions/download-artifact@v4
      with:
        name: views
        path: views/

    - name: Build Go application
      run: |
        mkdir -p build/
        BUILD_OS="${{ matrix.os }}"
        BUILD_ARCH="${{ matrix.arch }}"
        GOOS=$(echo "$BUILD_OS" | sed 's/-latest//')
        WIN_SUFFIX=""
        if [ "$BUILD_OS" = "windows" ]; then
          WIN_SUFFIX=".exe"
        fi
        CGO_ENABLED=0 go build -o build/run${WIN_SUFFIX} main.go
        cp -r views/ build/
        cp -r apps/ build/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LowCode_Plantform-${{ matrix.os }}-${{ matrix.arch }}${{ env.tag }}
        path: build/

  NonLinux:
    needs: [ViewDependencies]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        include:
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        check-latest: true

    - name: Download views dependencies
      uses: actions/download-artifact@v4
      with:
        name: views
        path: views/

    - name: Build Go application
      run: |
        mkdir -p build/
        BUILD_OS="${{ matrix.os }}"
        BUILD_ARCH="${{ matrix.arch }}"
        GOOS=$(echo "$BUILD_OS" | sed 's/-latest//')
        WIN_SUFFIX=""
        if [ "$BUILD_OS" = "windows" ]; then
          WIN_SUFFIX=".exe"
        fi
        CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${{ matrix.arch }} go build -o build/run${WIN_SUFFIX} main.go
        cp -r views/ build/
        cp -r apps/ build/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LowCode_Plantform-${{ matrix.os }}-${{ matrix.arch }}${{ env.tag }}
        path: build/

  MakeImage:
    needs: [BuildLinux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref_name == 'main' || github.ref_name == 'docker'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download amd64 build artifact
      uses: actions/download-artifact@v4
      with:
        name: LowCode_Plantform-linux-amd64${{ env.tag }}
        path: amd64/

    - name: Download arm64 build artifact
      uses: actions/download-artifact@v4
      with:
        name: LowCode_Plantform-linux-arm64${{ env.tag }}
        path: arm64/

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: jjli427/lowcode-plantform
        tags: |
          type=raw,value=${{ github.ref_name != 'main' && format('{0}-{1}', github.ref_name, github.run_id) || 'latest' }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: amd64/apps/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  ClearTmp:
    needs: [BuildLinux, NonLinux]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete views artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: views
          failOnError: false

  CreateRelease:
    needs: [ClearTmp]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Archive downloaded artifacts
        run: |
          for d in release-artifacts/*; do
            if [ -d "$d" ]; then
              zip -r "${d}.zip" "$d"
            fi
          done
      
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.MY_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/LowCode_Plantform-linux-amd64${{ env.tag }}.zip
            release-artifacts/LowCode_Plantform-linux-arm64${{ env.tag }}.zip
            release-artifacts/LowCode_Plantform-darwin-amd64${{ env.tag }}.zip
            release-artifacts/LowCode_Plantform-darwin-arm64${{ env.tag }}.zip
            release-artifacts/LowCode_Plantform-windows-amd64${{ env.tag }}.zip
            release-artifacts/LowCode_Plantform-windows-arm64${{ env.tag }}.zip